{"version":3,"sources":["components/custom-button/button.jsx","components/custom-input/custom-input.jsx","components/custom-select/custom-select.jsx","components/checkboxes/checkboxes.jsx","components/utilities/utility-methods.js","components/user-form/user-form.jsx","components/price-card-modal/price-card-modal.jsx","components/price-card/price-card.style.js","components/utilities/constants.js","components/price-card/price-card.jsx","components/tab/tab.style.js","components/tab/tab.jsx","components/price-page/price-page.jsx","App.js","serviceWorker.js","index.js"],"names":["defaultStyle","display","justifyContent","transition","cursor","width","padding","fontWeight","fontSize","CustomButton","props","data-testid","style","className","classNames","solid","getClassNames","onClick","click","children","CustomInput","as","attrs","title","FormGroup","FormLabel","htmlFor","id","required","class","FormControl","placeholder","toTitleCase","name","phrase","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","CustomSelect","options","otherProps","Form","Label","option","index","key","CheckBox","Check","inline","type","getObjectDataAsString","object","result","defaultState","email","phoneno","noOfLeads","totalLeads","crm","noOfAgents","UserForm","leadSources","zillow","realtor","ylopo","others","howTheyKnowUs","google","facebook","friends","realClosers","handleLeadSourceChange","handleHowTheyKnowUsCB","handleInputChnage","event","setState","state","target","value","handleFormSubmit","preventDefault","Object","entries","alert","onHide","onSubmit","this","Row","planName","onChange","pattern","Col","source","keys","label","Control","margin","backgroundColor","color","Component","PriceCardModel","Modal","aria-labelledby","backdrop","keyboard","size","Header","closeButton","Title","Body","Container","head","textTransform","marginBottom","bottom","largeFont","letterSpacing","mediumFont","marginTop","smallFont","separator","borderBottom","popularPriceCard","CONSTANTS","FILTER_PLAN_NAME","ENTERPRISE","SELECTED_INDEX","defaultProps","data","qualifiedLeadsPerMonth","pricePerLiveTransfer","totalQualifiedLeadPrice","totalPlatformPrice","finalPackagePrice","popular","PriceCard","incomingProps","useState","showModal","setModalState","show","onClose","isPopular","visibility","getPopularCardStyle","height","marginLeft","marginRight","tab","flex","tabBorder","borderRight","selectedTab","tabs","border","borderRadius","flexWrap","overflow","tabContent","Tabs","selectedIndex","setIndex","setChildren","useEffect","childrenClone","child","React","cloneElement","insideTabs","updateInsideTabsProp","Children","toArray","findIndex","reactElement","selected","findSelectedTabIndex","updateSelectedProp","getTabStyle","currentIndex","tabStyle","length","tabsStyle","getTabContent","tabDefaultProps","Tab","PricePage","getTabHeaders","tabHeaderSet","Set","item","add","averageHomePricePoint","Array","from","getTabData","header","filter","homePrice","fetch","then","json","catch","err","console","error","message","headers","planDetails","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c21b39e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./button.scss\";\n// Default button style.\nconst defaultStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  transition: \"all 0.1s\",\n  cursor: \"pointer\",\n  width: \"100%\",\n  padding: \"1rem\",\n  fontWeight: 500,\n  fontSize: \"1.1rem\",\n};\n\n/**\n * The componet to render a custom Button.\n * @param {object} props : Properties of a react component.\n * @returns {React.Component} A button Component with custom styling.\n */\nconst CustomButton = (props) => {\n  const getClassNames = () => {\n    let classNames = \"orangeTheme\";\n    if (props.solid) {\n      classNames += \" solid\";\n    }\n    return classNames;\n  };\n  return (\n    <button\n      data-testid={props[\"data-testid\"]}\n      style={{ ...defaultStyle, ...props.style }}\n      className={`${getClassNames()} mb-5`}\n      onClick={props.click}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default CustomButton;\n","import React from \"react\";\nimport { FormGroup, FormLabel, FormControl } from \"react-bootstrap\";\n/**\n * A react component for Custom Input with label.\n * @param {React.props} props : Properties of a component.\n * @returns {React.Component} A Component with input and label.\n */\nexport default function CustomInput(props) {\n  const { as, title, ...attrs } = props;\n  return (\n    <FormGroup as={as}>\n      <FormLabel htmlFor={props.id}>\n        {props.title}\n        {props.required ? <span class=\"text-danger\">*</span> : \"\"}\n      </FormLabel>\n      <FormControl {...attrs} placeholder={toTitleCase(attrs.name)} />\n    </FormGroup>\n  );\n}\n\n/**\n * converts a string into title case.\n * @param {string} phrase : Senetent you want to convert into title case(Space separated).\n * @returns {string} Space separated title case sentence'\n */\nconst toTitleCase = (phrase) => {\n  return phrase\n    .toLowerCase()\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n};\n","import React from \"react\";\nimport { FormGroup, Form, FormControl } from \"react-bootstrap\";\n\n/**\n * A react component for Custom Select options with label.\n * @param {React.props} props : Properties of a component.\n * @returns {React.Component} A Component with select options and label.\n */\nexport default function CustomSelect(props) {\n  const { title, as, id, options, ...otherProps } = props;\n  return (\n    <FormGroup as={as}>\n      <Form.Label htmlFor={id}>\n        {title}\n        {props.required ? \"*\" : \"\"}\n      </Form.Label>\n      <FormControl as=\"select\" {...otherProps}>\n        {options.map((option, index) => (\n          <option key={index}>{option}</option>\n        ))}\n      </FormControl>\n    </FormGroup>\n  );\n}\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\n/**\n * A react component for Custom Checkbox with label.\n * @param {React.props} props : Properties of a component.\n * @returns {React.Component} A Component with checkbox and label.\n */\nexport default function CheckBox(props) {\n  return <Form.Check inline {...props} type=\"checkbox\" />;\n}\n","// utility methods.\n/**\n * Utility method to get which checkbox is checked.\n * @param {object} object\n * @returns {string}: Keys concatenated with space whose value is true.\n */\nexport const getObjectDataAsString = (object) => {\n  let result = \"\";\n  for (const key in object) {\n    if (object[key]) {\n      result += `${key} `;\n    }\n  }\n  return result;\n};\n","import React, { Component } from \"react\";\nimport { Row, Col, Form, FormGroup, FormLabel } from \"react-bootstrap\";\nimport CustomInput from \"../custom-input/custom-input\";\nimport CustomSelect from \"../custom-select/custom-select\";\nimport CheckBox from \"../checkboxes/checkboxes\";\nimport { getObjectDataAsString } from \"../utilities/utility-methods\";\n\n// Default state of Price form.\nconst defaultState = {\n  email: \"\",\n  name: \"\",\n  phoneno: \"\",\n  noOfLeads: 0,\n  totalLeads: 0,\n  crm: \"\",\n  noOfAgents: 0,\n};\n\nexport default class UserForm extends Component {\n  // Object initialization for lead sources checkbox.\n  leadSources = {\n    zillow: false,\n    realtor: false,\n    ylopo: false,\n    others: false,\n  };\n\n  // Object initialization for how they know us checkboxes.\n  howTheyKnowUs = {\n    google: false,\n    facebook: false,\n    email: false,\n    friends: false,\n    realClosers: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = defaultState;\n  }\n\n  handleLeadSourceChange = (key) => {\n    this.leadSources[key] = !this.leadSources[key];\n  };\n\n  handleHowTheyKnowUsCB = (key) => {\n    this.howTheyKnowUs[key] = !this.howTheyKnowUs[key];\n  };\n\n  /**\n   * The method will handle input chnages by user.\n   * @param {event} event\n   */\n  handleInputChnage = (event) => {\n    this.setState({\n      ...this.state,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  /**\n   * Overrides default submit behaviour to our needs.\n   * @param {event} event\n   */\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    let result = \"\";\n    for (const [key, value] of Object.entries(this.state)) {\n      result += `${key}: ${value}\\n`;\n    }\n    result += \"Lead Sources: \" + getObjectDataAsString(this.leadSources) + \"\\n\";\n    result +=\n      \"How they know about us: \" + getObjectDataAsString(this.howTheyKnowUs);\n    alert(result);\n    this.setState({\n      ...defaultState,\n    });\n    this.props.onHide();\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleFormSubmit}>\n        <Row>\n          <h5>Plan Selected: </h5>\n          <p className=\"ml-1\">{this.props.planName}</p>\n        </Row>\n        <CustomInput\n          title=\"Name\"\n          type=\"text\"\n          onChange={this.handleInputChnage}\n          required\n          name=\"name\"\n          id=\"name\"\n          value={this.state.name}\n        />\n        <Form.Row>\n          <CustomInput\n            title=\"E-mail Address\"\n            type=\"email\"\n            value={this.state.email}\n            name=\"email\"\n            id=\"email\"\n            onChange={this.handleInputChnage}\n            pattern=\"(.+)@(.+){2,}\\.(.+){2,}\"\n            required\n            as={Col}\n          />\n          <CustomInput\n            type=\"tel\"\n            title=\"Phone No.\"\n            value={this.state.phoneno}\n            name=\"phoneno\"\n            id=\"phone\"\n            onChange={this.handleInputChnage}\n            pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\"\n            required\n            as={Col}\n          />\n        </Form.Row>\n        <Form.Row>\n          <CustomSelect\n            value={this.state.noOfLeads}\n            name=\"noOfLeads\"\n            id=\"noOfLeads\"\n            onChange={this.handleInputChnage}\n            options={[\"-\", 10, 20, 30, 40, 50]}\n            as={Col}\n            title=\"Number of leads you generate in a month\"\n          />\n          <CustomSelect\n            id=\"totalLeads\"\n            name=\"totalLeads\"\n            value={this.state.totalLeads}\n            onChange={this.handleInputChnage}\n            title=\"Total leads in your CRM\"\n            options={[\"-\", \"0-10\", \"10-20\", \"20-30\", \"30-40\"]}\n            as={Col}\n          />\n        </Form.Row>\n\n        <Form.Row>\n          <CustomSelect\n            title=\"Which CRM Do you use?\"\n            as={Col}\n            id=\"crm\"\n            name=\"crm\"\n            value={this.state.crm}\n            onChange={this.handleInputChnage}\n            options={[\"-\", \"Squad\", \"Insigthly\", \"Salesforce\"]}\n          />\n          <CustomSelect\n            title=\"No. of Agents\"\n            as={Col}\n            id=\"noOfAgents\"\n            name=\"noOfAgents\"\n            value={this.state.noOfAgents}\n            onChange={this.handleInputChnage}\n            options={[\"-\", 1, 2, 3, 4, 5]}\n          />\n        </Form.Row>\n\n        <Form.Row>\n          <FormLabel>What are your biggest lead sources?</FormLabel>\n        </Form.Row>\n        <Form.Row>\n          <FormGroup>\n            {[\n              { zillow: \"Zillow\" },\n              { realtor: \"Realtor\" },\n              { ylopo: \"Ylopo\" },\n              { others: \"Others\" },\n            ].map((source, index) => {\n              const [key] = Object.keys(source);\n              return (\n                <CheckBox\n                  key={index}\n                  id={key}\n                  label={source[key]}\n                  onChange={() => this.handleLeadSourceChange(key)}\n                />\n              );\n            })}\n          </FormGroup>\n        </Form.Row>\n\n        <Form.Row>\n          <FormLabel>How did you hear about us</FormLabel>\n        </Form.Row>\n\n        <Form.Row>\n          {[\n            { google: \"Google\" },\n            { facebook: \"Facebook\" },\n            { email: \"Email\" },\n            { friends: \"Friends\" },\n            { realClosers: \"Real Closers\" },\n          ].map((source, index) => {\n            const [key] = Object.keys(source);\n            return (\n              <CheckBox\n                key={index}\n                id={key}\n                label={source[key]}\n                onChange={() => this.handleHowTheyKnowUsCB(key)}\n              />\n            );\n          })}\n        </Form.Row>\n        <Form.Row>\n          <Form.Control\n            type=\"submit\"\n            className=\"btn mt-5\"\n            style={{\n              width: \"fit-content\",\n              margin: \"auto\",\n              backgroundColor: \"#ef5a35\",\n              color: \"#fff\",\n            }}\n          />\n        </Form.Row>\n      </Form>\n    );\n  }\n}\n","import React from \"react\";\nimport { Modal, Container } from \"react-bootstrap\";\nimport UserForm from \"../user-form/user-form\";\nimport \"./price-card.scss\";\n\n/**\n * The function will render Price card.\n * @param {React.props} props : Object with properties(React)\n */\nexport default function PriceCardModel(props) {\n  return (\n    <Modal\n      {...props}\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      backdrop=\"static\"\n      keyboard={false}\n      size=\"lg\"\n    >\n      <Modal.Header closeButton>\n        <Modal.Title\n          id=\"contained-modal-title-vcenter\"\n          className=\"text-centered\"\n        >\n          <h4>Get started with SquadVoice</h4>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"show-grid\">\n        <Container>\n          <UserForm {...props} />\n        </Container>\n      </Modal.Body>\n    </Modal>\n  );\n}\n","export const head = {\n  backgroundColor: \"#5A6F90\",\n  padding: \"1rem\",\n  color: \"white\",\n  textTransform: \"capitalize\",\n  marginBottom: \"0.5rem\",\n  display: \"flex\",\n  justifyContent: \"center\",\n};\n\nexport const bottom = { ...head };\n\nexport const largeFont = {\n  fontSize: \"2rem\",\n  fontWeight: \"600\",\n  letterSpacing: \"1px\",\n};\n\nexport const mediumFont = {\n  fontSize: \"1.2rem\",\n  fontWeight: \"500\",\n  marginTop: \"-5px\",\n  marginBottom: \"0.5rem\",\n};\n\nexport const smallFont = {\n  fontSize: \"0.9rem\",\n  margin: \"15px 0 15px 0\",\n};\n\nexport const separator = {\n  borderBottom: \"2px dashed lightgrey\",\n  margin: \"0 5px 0 5px\",\n};\n\nexport const popularPriceCard = {\n  backgroundColor: \"rgb(222, 99, 67)\",\n  color: \"#FFF\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  padding: \"1rem\",\n};\n","const CONSTANTS = {\n  FILTER_PLAN_NAME: \"Qualified 60\", // Enter the name of the tab you don't want to show on the page\n  ENTERPRISE: \"Enterprise\",\n  SELECTED_INDEX: 2, // Enter your selected Index here.\n};\n\nexport default CONSTANTS;\n","import React, { useState } from \"react\";\nimport CustomButton from \"../custom-button/button\";\nimport PriceCardModal from \"../price-card-modal/price-card-modal\";\nimport {\n  bottom,\n  head,\n  largeFont,\n  mediumFont,\n  popularPriceCard,\n  separator,\n  smallFont,\n} from \"./price-card.style\";\nimport CONSTANTS from \"../utilities/constants\";\nimport \"./price-card.scss\";\n\n// Set default values.\nconst defaultProps = {\n  data: {\n    planName: \"\",\n    qualifiedLeadsPerMonth: 0,\n    pricePerLiveTransfer: \"\",\n    totalQualifiedLeadPrice: \"\",\n    totalPlatformPrice: \"\",\n    finalPackagePrice: \"\",\n    popular: false,\n  },\n};\n\nconst PriceCard = (incomingProps) => {\n  // add all the props in one object.\n  const props = {\n    ...defaultProps,\n    ...incomingProps,\n  };\n\n  // set a state object.\n  const [showModal, setModalState] = useState(false);\n\n  // Set popular card style to cards.\n  const getPopularCardStyle = (isPopular) => {\n    let style = { ...popularPriceCard };\n    if (!isPopular) {\n      style = { ...style, visibility: \"hidden\" };\n    }\n    return style;\n  };\n\n  // destructure object to use directly.\n  const {\n    style,\n    data: { planName },\n  } = props;\n\n  const backgroundColor =\n    props.data.popular || planName === CONSTANTS.ENTERPRISE\n      ? \"rgb(242, 242, 242\"\n      : \"fff\";\n  return (\n    <>\n      <div style={style} className=\"col-xs-12 col-md-3\">\n        <PriceCardModal\n          planName={planName}\n          show={showModal}\n          onClose={() => setModalState(false)}\n        />\n        <div style={getPopularCardStyle(props.data.popular)}>Most Popular!</div>\n        <div style={head} data-testid=\"plan-name\">\n          {planName}\n        </div>\n        <div className=\"body-container\" style={{ backgroundColor }}>\n          <div\n            style={{\n              marginTop: \"30px\",\n              marginBottom: \"-7px\",\n              display: planName === CONSTANTS.ENTERPRISE ? \"block\" : \"none\",\n              height: \"7em\",\n            }}\n          >\n            <p\n              className=\"enterprise-box text-center\"\n              style={{ backgroundColor }}\n            >\n              Want more than 80 qualified leads each month?\n            </p>\n          </div>\n          <div\n            className=\"container\"\n            style={{\n              visibility:\n                planName === CONSTANTS.ENTERPRISE ? \"hidden\" : \"visible\",\n              backgroundColor,\n            }}\n          >\n            <center>\n              <div\n                style={{ ...largeFont, marginTop: \"30px\" }}\n                data-testid=\"price-per-live-transfer\"\n              >\n                {props.data.pricePerLiveTransfer}\n              </div>\n              <div style={smallFont}>Per Qualified lead</div>\n              <div style={separator} />\n              <div style={smallFont}> Qualified Leads Per Month</div>\n              <div style={mediumFont} data-testid=\"qualified-leads-per-month\">\n                {props.data.qualifiedLeadsPerMonth}\n              </div>\n              <div style={separator} />\n              <div style={smallFont}>Platform Fee Per Month</div>\n              <div\n                style={{ ...mediumFont, marginBottom: \"15px\" }}\n                data-testid=\"total-platform-price\"\n              >\n                {props.data.totalPlatformPrice}\n              </div>\n\n              <div\n                style={{\n                  ...bottom,\n                  ...mediumFont,\n                  fontWeight: 600,\n                  marginLeft: \"-15px\",\n                  marginRight: \"-15px\",\n                }}\n                data-testid=\"final-package-price\"\n              >\n                {props.data.finalPackagePrice}/mo\n              </div>\n            </center>\n          </div>\n          <CustomButton\n            solid={props.data.popular ? true : false}\n            click={() => setModalState(true)}\n          >\n            {planName === CONSTANTS.ENTERPRISE\n              ? \"Get In Touch\"\n              : \"Start Your Trial\"}\n          </CustomButton>\n        </div>\n      </div>\n\n      <PriceCardModal\n        planName={planName}\n        show={showModal}\n        onHide={() => setModalState(false)}\n      />\n    </>\n  );\n};\n\nexport default PriceCard;\n","export const tab = {\n  padding: \"1rem\",\n  fontWeight: 600,\n  flex: 1,\n  display: \"flex\",\n  justifyContent: \"center\",\n  cursor: \"pointer\",\n};\n\nexport const tabBorder = {\n  borderRight: \"2px solid #D1D1D1\",\n};\n\nexport const roundBorder = {\n  border: \"1rem solid transparent\",\n};\n\nexport const selectedTab = {\n  backgroundColor: \"#5A6F90\",\n  color: \"#FFF\",\n};\n\nexport const tabs = {\n  display: \"flex\",\n  border: \"1px solid transparent\",\n  borderRadius: \"0.5rem\",\n  backgroundColor: \"#F8F8F8\",\n  flexWrap: \"wrap\",\n  marginBottom: \"2rem\",\n  overflow: \"hidden\",\n  margin: \"80px 10px\",\n};\n\nexport const tabContent = {\n  display: \"flex\",\n  flexWrap: \"wrap\",\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  tab as tabStyle,\n  tabs as tabsStyle,\n  tabBorder,\n  selectedTab,\n  tabContent,\n} from \"./tab.style\";\nimport \"./tab.scss\";\n\n/**\n * The component which will render multiple tabs inside it.\n * @param {React.props} incomingProps : Group of tabs as children.\n * @returns A component which will render all the tabs passed to it.\n */\nconst Tabs = (props) => {\n  // Set local state and hooks.\n  const [selectedIndex, setIndex] = useState(0);\n  const [children, setChildren] = useState(props.children);\n\n  /**\n   * Update tabs with latest data.\n   * @param {React.props.Children} children\n   */\n  const updateInsideTabsProp = (children) => {\n    const childrenClone = children.map((child) =>\n      React.cloneElement(child, { insideTabs: true })\n    );\n    setChildren(childrenClone);\n  };\n\n  /**\n   * Find selected tab to highlight it.\n   * @param {React.props.Children} children\n   */\n  const findSelectedTabIndex = (children) => {\n    const isTabSelected = (reactElement) => reactElement.props.selected;\n    const childrenArray = React.Children.toArray(children);\n    return childrenArray.findIndex(isTabSelected);\n  };\n\n  useEffect(() => {\n    updateInsideTabsProp(props.children);\n    const index = findSelectedTabIndex(props.children);\n    if (index > -1) {\n      setIndex(index);\n    }\n  }, [props.children]);\n\n  const getTabContent = (children) => {\n    return children.map(updateSelectedProp);\n  };\n\n  /**\n   * Update property of seected child.\n   * @param {React.props.Children.child} child : input child.\n   * @param {number} index: index of current child.\n   * @returns {React.props.Children.child} : clone of input child with updated properties.\n   */\n  const updateSelectedProp = (child, index) => {\n    let childClone = child;\n    if (selectedIndex === index) {\n      childClone = React.cloneElement(child, { selected: true, key: index });\n      return childClone;\n    }\n    childClone = React.cloneElement(child, { selected: false, key: index });\n    return childClone;\n  };\n\n  /**\n   * The method will return style for the tab passed as index.\n   * @param {React.props.Children} children : All tabs as children of tabs component.\n   * @param {number} currentIndex : index of child being considered.\n   * @returns {object} : Style object for current child.\n   */\n  const getTabStyle = (children, currentIndex) => {\n    let style = { ...tabStyle };\n\n    if (currentIndex !== children.length - 1) {\n      style = { ...style, ...tabBorder };\n    }\n\n    if (currentIndex === selectedIndex) {\n      style = { ...style, ...selectedTab };\n    }\n\n    return style;\n  };\n\n  return (\n    <>\n      <div style={{ ...tabsStyle }}>\n        {children.map((tab, index) => (\n          <span\n            className=\"tab\"\n            style={getTabStyle(children, index)}\n            key={index}\n            onClick={() => setIndex(index)}\n          >\n            {tab.props.name}\n          </span>\n        ))}\n      </div>\n\n      {getTabContent(children).map((child) => child)}\n    </>\n  );\n};\n\n// Default propertu of a tab.\nconst tabDefaultProps = {\n  name: \"\",\n  selected: true,\n  insideTabs: false,\n};\n\n/**\n * A single Tab component.\n * @param {React.Component.props} incomingProps\n * @returns {React.Component} : Tab component.\n */\nconst Tab = (incomingProps) => {\n  const props = { ...tabDefaultProps, ...incomingProps };\n\n  return (\n    <>\n      {!props.insideTabs && <span>{props.name}</span>}\n      <div style={tabContent}>{props.selected && props.children}</div>\n    </>\n  );\n};\n\nexport { Tabs, Tab };\n","import React, { Component } from \"react\";\nimport PriceCard from \"../price-card/price-card\";\nimport { Tab, Tabs } from \"../tab/tab\";\nimport CONSTANTS from \"../utilities/constants\";\nimport \"./price-page.scss\";\nconst DATA_URI =\n  \"https://raw.githubusercontent.com/sonutiwari/squad-take-home/master/src/mockdata/data.json\";\n/**\n * The page will show main content of the website which includes different price ranges and Plans based on chosen categories.\n */\nexport default class PricePage extends Component {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n  }\n\n  /**\n   * Set the data here, for this case we have static data.\n   */\n  componentDidMount() {\n    fetch(DATA_URI)\n      .then((data) => data.json())\n      .then((data) => {\n        this.setState({ data });\n      })\n      .catch((err) => {\n        console.error(err.message);\n      });\n  }\n\n  // Get tabs header text array\n  getTabHeaders = () => {\n    const tabHeaderSet = new Set();\n    for (const item of this.state.data) {\n      tabHeaderSet.add(item.averageHomePricePoint);\n    }\n    return Array.from(tabHeaderSet);\n  };\n\n  /**\n   * filter tab data of header from data collection\n   * @param {string} header - text of header\n   */\n  getTabData = (header) => {\n    return this.state.data.filter(\n      (homePrice) => homePrice.averageHomePricePoint === header\n    );\n  };\n\n  render() {\n    const headers = this.getTabHeaders(); // Get all the headers.\n    return (\n      <Tabs>\n        {headers.map((\n          header,\n          index // Map headers to tabs.\n        ) => (\n          <Tab\n            key={index}\n            name={header}\n            selected={index === CONSTANTS.SELECTED_INDEX}\n            className={\n              index === 0 || index === headers.length - 1\n                ? \"rounded-border\"\n                : \"\"\n            }\n          >\n            {this.getTabData(header) // filter data of each header.\n              .filter(\n                ({ planDetails: { planName } }) =>\n                  planName !== CONSTANTS.FILTER_PLAN_NAME\n              )\n              .map((data, index) => (\n                <PriceCard key={index} data={data.planDetails} /> // Psedo render tabs(not visible on UI yet unless tab is active.)\n              ))}\n            {\n              <PriceCard /* Enterprise Card which is an outlier. */\n                data={{\n                  planName: \"Enterprise\",\n                }}\n                className=\"price-card\"\n              />\n            }\n          </Tab>\n        ))}\n      </Tabs>\n    );\n  }\n}\n","import React from \"react\";\nimport PricePage from \"./components/price-page/price-page\";\n/**\n * Main Page.\n */\nfunction App() {\n  return (\n    <div style={{ margin: \"50px\" }}>\n      <PricePage className=\"main-box\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}